console.log("üöÄ setting.js is running...");

// ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Firebase
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.5.0/firebase-app.js";
import {
  getDatabase,
  ref,
  set,
  onValue,
  get,
} from "https://www.gstatic.com/firebasejs/10.5.0/firebase-database.js";

// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Firebase
const firebaseConfig = {
  apiKey: "AIzaSyDwOyp3Vdjo5VlE9XT2BCXjKQ411kLsJDQ",
  authDomain: "dht22-14f97.firebaseapp.com",
  databaseURL: "https://dht22-14f97-default-rtdb.firebaseio.com",
  projectId: "dht22-14f97",
  storageBucket: "dht22-14f97.firebasestorage.app",
  messagingSenderId: "131749789651",
  appId: "1:131749789651:web:20c7b9cbd9fca47ee2b926",
  measurementId: "G-RKV9EL32X4"
};

const app = initializeApp(firebaseConfig);
const db = getDatabase(app);
const controlRef = ref(db, "controls");
const deviceRef = ref(db, "device");

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `/controls/` (ESP32 ‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `/device/`)
async function updateControlState(key, value) {
  try {
    await set(ref(db, `controls/${key}`), value);
    console.log(`‚úÖ Updated /controls/${key} ‚Üí`, value);
  } catch (error) {
    console.error("‚ùå Firebase Error:", error);
  }
}

// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å `/device/` ‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô UI
function loadDeviceStatus() {
  onValue(deviceRef, (snapshot) => {
    if (!snapshot.exists()) {
      console.warn("‚ö†Ô∏è No data found in Firebase for device!");
      return;
    }
    const data = snapshot.val();
    console.log("üîÑ Updated UI from /device/:", data);
    updateStatusUI(data);
  });
}

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô `/device/`
function updateStatusUI(data) {
  const statusMap = {
    light: "light",
    fan: "fan",
    feed_motor: "feed",
    water_valve: "water",
    spread_motor: "spread",  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° spread_motor
  };

  Object.keys(statusMap).forEach((key) => {
    const statusElement = document.getElementById(`status-${statusMap[key]}`);
    if (statusElement) {
        statusElement.textContent = data[key] ? `ON ‚úÖ` : `OFF ‚ùå`;
        statusElement.className = data[key] ? "status-on" : "status-off";
    }
  });
}

// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Firebase ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener("DOMContentLoaded", function () {
  console.log("üåê Setting page loaded...");
  loadDeviceStatus(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å /device/

  // ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Toggle (‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå)
  const addToggleListener = (id, key) => {
    const element = document.getElementById(id);
    if (element) {
      element.addEventListener("change", function () {
        updateControlState(key, this.checked);
      });
    }
  };

  addToggleListener("toggle-light", "light");
  addToggleListener("toggle-fan", "fan");
  addToggleListener("toggle-feed-motor", "feed_motor");
  addToggleListener("toggle-water-valve", "water_valve");

  // ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Feed ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å /device/feed_motor ‡πÅ‡∏ó‡∏ô /controls/)
const feedButton = document.getElementById("feed-food");
if (feedButton) {
  feedButton.addEventListener("click", async () => {
    try {
      // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å /device/feed_motor
      const snapshot = await get(ref(db, "device/feed_motor"));
      const currentState = snapshot.exists() ? snapshot.val() : false;

      // ‚úÖ ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÄ‡∏õ‡∏¥‡∏î -> ‡∏õ‡∏¥‡∏î, ‡∏õ‡∏¥‡∏î -> ‡πÄ‡∏õ‡∏¥‡∏î)
      const newState = !currentState;

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà /controls/feed_motor ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ ESP32 ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
      await updateControlState("feed_motor", newState);

      console.log(`üçΩ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï feed_motor ‡πÉ‡∏ô Firebase ‚Üí ${newState ? "ON ‚úÖ" : "OFF ‚ùå"}`);
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á Feed Food:", error);
    }
  });
}

// ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Feed ‡∏ô‡πâ‡∏≥ (‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å /device/water_valve ‡πÅ‡∏ó‡∏ô /controls/)
const feedWater = document.getElementById("feed-water");
if (feedWater) {
  feedWater.addEventListener("click", async () => {
    try {
      // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å /device/water_valve
      const snapshot = await get(ref(db, "device/water_valve"));
      const currentState = snapshot.exists() ? snapshot.val() : false;

      // ‚úÖ ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÄ‡∏õ‡∏¥‡∏î -> ‡∏õ‡∏¥‡∏î, ‡∏õ‡∏¥‡∏î -> ‡πÄ‡∏õ‡∏¥‡∏î)
      const newState = !currentState;

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà /controls/water_valve ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ ESP32 ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
      await updateControlState("water_valve", newState);

      console.log(`üíß ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï water_valve ‡πÉ‡∏ô Firebase ‚Üí ${newState ? "ON ‚úÖ" : "OFF ‚ùå"}`);
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á Feed Water:", error);
    }
  });
}

  // ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö
const resetSystem = document.getElementById("reset-system");
if (resetSystem) {
  resetSystem.addEventListener("click", async () => {
    if (confirm("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö?")) {
      // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô false ‡∏ó‡∏µ‡πà /controls/
      await updateControlState("light", false);
      await updateControlState("fan", false);
      await updateControlState("feed_motor", false);
      await updateControlState("spread_motor", false);
      await updateControlState("water_valve", false);

      alert("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");

      // ‚úÖ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å /device/ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
      refreshToggleState();
    }
  });
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏° Toggle ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô /device/
async function refreshToggleState() {
  try {
    const snapshot = await get(ref(db, "device"));
    if (!snapshot.exists()) {
      console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å /device/");
      return;
    }
    const data = snapshot.val();

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏° Toggle ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô /device/
    document.getElementById("toggle-light").checked = data.light;
    document.getElementById("toggle-fan").checked = data.fan;
    document.getElementById("toggle-feed-motor").checked = data.feed_motor;
    document.getElementById("toggle-spread-motor").checked = data.spread_motor;
    document.getElementById("toggle-water-valve").checked = data.water_valve;

    console.log("üîÑ ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏° Toggle ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô /device/");
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å /device/:", error);
  }
}
});
