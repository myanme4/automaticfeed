console.log("üöÄ setting.js is running...");

// ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Firebase
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.5.0/firebase-app.js";
import {
  getDatabase,
  ref,
  set,
  onValue,
  get,
} from "https://www.gstatic.com/firebasejs/10.5.0/firebase-database.js";

// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Firebase
const firebaseConfig = {
  apiKey: "AIzaSyDwOyp3Vdjo5VlE9XT2BCXjKQ411kLsJDQ",
  authDomain: "dht22-14f97.firebaseapp.com",
  databaseURL: "https://dht22-14f97-default-rtdb.firebaseio.com",
  projectId: "dht22-14f97",
  storageBucket: "dht22-14f97.firebasestorage.app",
  messagingSenderId: "131749789651",
  appId: "1:131749789651:web:20c7b9cbd9fca47ee2b926",
  measurementId: "G-RKV9EL32X4"
};

const app = initializeApp(firebaseConfig);
const db = getDatabase(app);
const controlRef = ref(db, "controls");
const deviceRef = ref(db, "device");

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `/controls/` (ESP32 ‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `/device/`)
async function updateControlState(key, value) {
  try {
    await set(ref(db, `controls/${key}`), value);
    console.log(`‚úÖ Updated /controls/${key} ‚Üí`, value);
  } catch (error) {
    console.error("‚ùå Firebase Error:", error);
  }
}

// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å `/device/` ‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô UI
function loadDeviceStatus() {
  onValue(deviceRef, (snapshot) => {
    if (!snapshot.exists()) {
      console.warn("‚ö†Ô∏è No data found in Firebase for device!");
      return;
    }
    const data = snapshot.val();
    console.log("üîÑ Updated UI from /device/:", data);
    updateStatusUI(data);
  });
}

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô `/device/`
function updateStatusUI(data) {
  const statusMap = {
    light: "light",
    fan: "fan",
    feed_motor: "feed",
    water_valve: "water",
    spread_motor: "spread",  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° spread_motor
  };

  Object.keys(statusMap).forEach((key) => {
    const statusElement = document.getElementById(`status-${statusMap[key]}`);
    if (statusElement) {
        statusElement.textContent = data[key] ? `ON ‚úÖ` : `OFF ‚ùå`;
        statusElement.className = data[key] ? "status-on" : "status-off";
    }
  });
}

// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Firebase ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener("DOMContentLoaded", function () {
  console.log("üåê Setting page loaded...");
  loadDeviceStatus(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å /device/

  // ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Toggle (‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå)
  const addToggleListener = (id, key) => {
    const element = document.getElementById(id);
    if (element) {
      element.addEventListener("change", function () {
        updateControlState(key, this.checked);
      });
    }
  };

  addToggleListener("toggle-light", "light");
  addToggleListener("toggle-fan", "fan");
  addToggleListener("toggle-feed-motor", "feed_motor");
  addToggleListener("toggle-water-valve", "water_valve");

  // ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Feed ‡∏≠‡∏≤‡∏´‡∏≤‡∏£
  const feedButton = document.getElementById("feed-food");
  if (feedButton) {
    feedButton.addEventListener("click", async () => {
      let countdown = 7;  // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 7 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Arduino
      feedButton.disabled = true;
      await updateControlState("feed_motor", true);

      const countdownInterval = setInterval(() => {
        if (countdown > 0) {
          feedButton.textContent = `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£... ${countdown} ‡∏ß‡∏¥`;
          countdown--;
        } else {
          clearInterval(countdownInterval);
          updateControlState("feed_motor", false);
          feedButton.disabled = false;
          feedButton.textContent = "FEED";
          alert("‚úÖ ‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!");
        }
      }, 1000);
    });
  }

  // ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Feed ‡∏ô‡πâ‡∏≥
  const feedWater = document.getElementById("feed-water");
if (feedWater) {
  feedWater.addEventListener("click", async () => {
    feedWater.disabled = true;  // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏ã‡πâ‡∏≥
    await updateControlState("water_valve", true);
    
    let countdown = 10;
    const countdownInterval = setInterval(() => {
      if (countdown > 0) {
        feedWater.textContent = `‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥... ${countdown} ‡∏ß‡∏¥`;
        countdown--;
      } else {
        clearInterval(countdownInterval);
        updateControlState("water_valve", false);
        feedWater.disabled = false;
        feedWater.textContent = "FEED WATER";
        alert("‚úÖ ‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!");
      }
    }, 1000);
  });
}

  // ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö
  const resetSystem = document.getElementById("reset-system");
  if (resetSystem) {
    resetSystem.addEventListener("click", async () => {
      if (confirm("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö?")) {
        await updateControlState("light", false);
        await updateControlState("fan", false);
        await updateControlState("feed_motor", false);
        await updateControlState("spread_motor", false);
        await updateControlState("water_valve", false);

        alert("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
      }
    });
  }
});
